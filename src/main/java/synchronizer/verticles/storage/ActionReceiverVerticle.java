package synchronizer.verticles.storage;import io.vertx.core.AbstractVerticle;import io.vertx.core.Future;import io.vertx.core.Vertx;import io.vertx.core.eventbus.EventBus;import io.vertx.core.eventbus.MessageConsumer;import io.vertx.core.json.Json;import io.vertx.core.json.JsonObject;import org.apache.logging.log4j.LogManager;import org.apache.logging.log4j.Logger;import synchronizer.models.EventBusAddress;import synchronizer.models.SharedDataMapAddress;import synchronizer.models.actions.Action;import java.net.InetAddress;import java.nio.file.Path;/** * Class responsible for listening incoming actions * */// responsible for listening for incoming actionspublic class ActionReceiverVerticle extends AbstractVerticle {    // logger    private static final Logger logger = LogManager.getLogger(ActionReceiverVerticle.class);    // event bus address to receive actions from    private EventBusAddress address;    // consume file system actions from event bus    private MessageConsumer<JsonObject> consumer;    // object received from event bus    private JsonObject actionObject;    // local synchronized path    private Path path;    // my host    private String host;    /**     *     * @param path - local path     * @param address - event bus address to listen for incoming alternations     * @param globalMapAddress - SharedData map address for global path structure (what's received)     */    public ActionReceiverVerticle(Path path, EventBusAddress address, SharedDataMapAddress globalMapAddress){        this.path = path;        this.address = address;        this.host = getHost();    }    @Override    public void start(Future<Void> startFuture) throws Exception{        EventBus eb = vertx.eventBus();        this.consumer = eb.consumer(address.toString());        this.consumer.handler(message ->{            logger.info(String.format("%s received from event bus %s",this.host ,message.body()));            Action action = Json.decodeValue(message.body().toString(),Action.class);            switch (action.type){                case DELETE:                    // update globalMapAddress                    // deploy delete file task                    break;                case CREATE:                    // update globalMapAddress                    break;                case MODIFY:                    // update globalMapAddress                    break;                case RENAME:                    // update globalMapAddress                    break;                default:                    logger.warn(String.format("%s received unknown action type from message: %s",this.host,message.body().toString() ));                    break;            }        });        // consuming file system action events        logger.info(String.format("%s consuming actions from event bus address: %s",this.host, this.address.toString()));    }    @Override    public void stop(Future<Void> stopFuture) throws Exception{        super.stop(stopFuture);    }    public String getHost(){        InetAddress inetAddress;        try{            inetAddress = InetAddress.getLocalHost();        }catch (Exception e){            // cry            return "Unknown host";        }        return inetAddress.getHostAddress();    }}